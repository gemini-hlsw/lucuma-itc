# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-22.04]
        scala: [3]
        java: [temurin@17]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt -v -J-Xmx6g +update

      - name: Validate GraphQL schema changes
        if: github.event_name == 'pull_request'
        uses: kamilkisiela/graphql-inspector@master
        with:
          schema: 'main:modules/service/src/main/resources/graphql/itc.graphql'
          approve-label: expected-breaking-change

      - name: Check that workflows are up to date
        run: sbt -v -J-Xmx6g githubWorkflowCheck

      - name: Check headers and formatting
        if: matrix.java == 'temurin@17' && matrix.os == 'ubuntu-22.04'
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' headerCheckAll scalafmtCheckAll 'project /' scalafmtSbtCheck lucumaScalafmtCheck lucumaScalafixCheck

      - name: Check scalafix lints
        if: matrix.java == 'temurin@17' && matrix.os == 'ubuntu-22.04'
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' 'scalafixAll --check'

      - name: Test
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' test

      - name: Check binary compatibility
        if: matrix.java == 'temurin@17' && matrix.os == 'ubuntu-22.04'
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' mimaReportBinaryIssues

      - name: Generate API documentation
        if: matrix.java == 'temurin@17' && matrix.os == 'ubuntu-22.04'
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' doc

      - name: Aggregate coverage reports
        run: sbt -v -J-Xmx6g '++ ${{ matrix.scala }}' coverageReport coverageAggregate

      - name: Upload code coverage data
        uses: codecov/codecov-action@v4

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@17]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt -v -J-Xmx6g +update

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_CREDENTIAL_HOST: ${{ secrets.SONATYPE_CREDENTIAL_HOST }}
        run: sbt -v -J-Xmx6g tlCiRelease

  deploy:
    name: Build and publish Docker image / Deploy to Heroku
    if: (github.ref == 'refs/heads/main' && startsWith(github.repository, 'gemini'))
    strategy:
      matrix:
        os: [ubuntu-22.04]
        scala: [3.7.2]
        java: [temurin@17]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt -v -J-Xmx6g +update

      - name: Build and Publish Docker image
        run: 'sbt -v -J-Xmx6g ''++ ${{ matrix.scala }}'' clean deploy/docker:publishLocal'

      - name: Deploy and release app in Heroku
        run: |
          npm install -g heroku
          heroku container:login
          docker tag noirlab/gpp-itc registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-dev/web:${{ github.sha }}
          docker push registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-dev/web:${{ github.sha }}
          docker tag noirlab/gpp-itc registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-staging/web:${{ github.sha }}
          docker push registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-staging/web:${{ github.sha }}
          docker tag noirlab/gpp-itc registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-production/web:${{ github.sha }}
          docker push registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-production/web:${{ github.sha }}
          docker tag noirlab/gpp-itc registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-dev/web
          docker push registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-dev/web
          heroku container:release web -a ${{ vars.HEROKU_APP_NAME || 'itc' }}-dev -v

      - name: Get Docker image SHA
        run: echo "DOCKER_IMAGE_SHA=$(docker inspect registry.heroku.com/${{ vars.HEROKU_APP_NAME || 'itc' }}-dev/web:${{ github.sha }} --format={{.Id}})" >> $GITHUB_ENV

      - name: Record deployment gha
        if: github.ref == 'refs/heads/main'
        run: |
          # Create a deployment record with commit SHA and image SHA for tracking
          echo "Recording deployment: ${{ github.sha }} to ${{ github.repository }}"
          curl -X POST https://api.github.com/repos/${{ github.repository }}/deployments -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "Accept: application/vnd.github+json" -d '{ "ref": "${{ github.sha }}", "environment": "development", "description": "ITC deployment to dev", "auto_merge": false, "required_contexts": [], "payload": { "docker_image_sha": "${{ DOCKER_IMAGE_SHA }}" } }' 
